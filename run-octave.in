#! /bin/sh
##
## run-octave -- run Octave in the build tree.
##
########################################################################
##
## Copyright (C) 2006-2023 The Octave Project Developers
##
## See the file COPYRIGHT.md in the top-level directory of this
## distribution or <https://octave.org/copyright/>.
##
## This file is part of Octave.
##
## Octave is free software: you can redistribute it and/or modify it
## under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## Octave is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with Octave; see the file COPYING.  If not, see
## <https://www.gnu.org/licenses/>.
##
########################################################################

: ${AWK=%AWK%}
: ${FIND=%FIND%}
: ${SED=%SED%}
: ${ADDRESS_SANITIZER_ENABLED="%ADDRESS_SANITIZER_ENABLED%"}
: ${ADDRESS_SANITIZER_OPTIONS="%ADDRESS_SANITIZER_OPTIONS%"}

# FIXME: is there a better way to handle the possibility of spaces
#        in these names?

top_srcdir='%abs_top_srcdir%'
builddir='%builddir%'

d1="$top_srcdir/scripts"
d2="$builddir/scripts"
d3="$builddir/libinterp"
d4="$top_srcdir/examples/data"
d5="$builddir/libgui/graphics"

d1_list=`$FIND "$d1" -type d -a ! \( \( -name private -o -name '@*' -o -name '+*' -o -name '.deps' -o -name '.libs' \) -a -prune \) -exec echo '{}' ';' | $SED 's/$/:/'`
d2_list=`$FIND "$d2" -type d -a ! \( \( -name private -o -name '@*' -o -name '+*' -o -name '.deps' -o -name '.libs' \) -a -prune \) -exec echo '{}' ';' | $SED 's/$/:/'`
d3_list=`$FIND "$d3" -type d -a ! \( \( -name private -o -name '@*' -o -name '+*' -o -name '.deps' -o -name '.libs' \) -a -prune \) -exec echo '{}' ';' | $SED 's/$/:/'`
d4_list=`$FIND "$d4" -type d -exec echo '{}' ';' | $SED 's/$/:/'`

d1_path=`echo "$d1_list" | $AWK '{ t = (s $0); s = t; } END { sub (/:$/, "", s); print s; }'`
d2_path=`echo "$d2_list" | $AWK '{ t = (s $0); s = t; } END { sub (/:$/, "", s); print s; }'`
d3_path=`echo "$d3_list" | $AWK '{ t = (s $0); s = t; } END { sub (/:$/, "", s); print s; }'`
d4_path=`echo "$d4_list" | $AWK '{ t = (s $0); s = t; } END { sub (/:$/, "", s); print s; }'`

octave_executable="$builddir/src/octave"

LOADPATH="$d1_path:$d2_path:$d3_path:$d4_path:$d5"
IMAGEPATH=".:$top_srcdir/scripts/image"
DOCFILE="$builddir/doc/interpreter/doc-cache"
BUILT_IN_DOCSTRINGS_FILE="$builddir/libinterp/DOCSTRINGS"
TEXIMACROSFILE="$top_srcdir/doc/interpreter/macros.texi"
INFOFILE="$top_srcdir/doc/interpreter/octave.info"

## Checking for string equality below with prepended x's in order to
## handle problems with empty strings.
while [ $# -gt 0 ]; do
  if [ "x$1" = "x-g" ]; then
    driver="gdb --args"
    shift
  elif [ "x$1" = "x-gud" ]; then
    ## Frontends for gdb (e.g. Emacs's GUD mode) need --annotate=3
    driver="gdb --annotate=3 --args"
    shift
  elif [ "x$1" = "x-gud2" ]; then
    ## The latest version of gud needs -i=mi. There isn't a good way to check
    ## this at configure time, so we just add a gud2 flag
    driver="gdb -i=mi --args"
    shift
  elif [ "x$1" = "x-valgrind" ]; then
    driver="valgrind --tool=memcheck"
    shift
  elif [ "x$1" = "x-callgrind" ]; then
    driver="valgrind --tool=callgrind"
    shift
  elif [ "x$1" = "x-strace" ]; then
    driver="strace -o octave.trace"
    shift
  elif [ "x$1" = "x-cli" ]; then
    octave_executable="$builddir/src/octave-cli"
    shift
  elif [ "x$1" = "x-disable-asan" ]; then
    disable_asan=yes
    shift
  else
    break
  fi
done

## DOCSTRINGS and doc-cache files may exist in the current (build) directory
## or in the source directory when building from a release.
if ! [ -e $DOCFILE ]; then
  DOCFILE="$top_srcdir/doc/interpreter/doc-cache"
fi
if ! [ -e $BUILT_IN_DOCSTRINGS_FILE ]; then
  BUILT_IN_DOCSTRINGS_FILE="$top_srcdir/libinterp/DOCSTRINGS"
fi

## We set OCTAVE_ARCHLIBDIR so that the wrapper program can find the
## octave-gui program in the build tree.  That will fail if we ever
## need Octave to find other things in ARCHLIBDIR that are not built
## in the $builddir/src directory.

OCTAVE_ARCHLIBDIR="$builddir/src"; export OCTAVE_ARCHLIBDIR
OCTAVE_BINDIR="$builddir/src"; export OCTAVE_BINDIR
OCTAVE_FONTS_DIR="$top_srcdir/etc/fonts"; export OCTAVE_FONTS_DIR
OCTAVE_JAVA_DIR="$builddir/scripts/java"; export OCTAVE_JAVA_DIR
OCTAVE_LOCALE_DIR="$builddir/libgui/languages"; export OCTAVE_LOCALE_DIR
OCTAVE_QTHELP_COLLECTION="$builddir/doc/interpreter/octave_interpreter.qhc"; export OCTAVE_QTHELP_COLLECTION
OCTAVE_SITE_INITFILE="$top_srcdir/scripts/startup/site-rcfile"; export OCTAVE_SITE_INITFILE
OCTAVE_VERSION_INITFILE="$top_srcdir/scripts/startup/version-rcfile"; export OCTAVE_VERSION_INITFILE

if [ "$ADDRESS_SANITIZER_ENABLED" = yes ]; then
  if [ "$disable_asan" = yes ]; then
    ## Is there a better way to do this so that we don't fill /tmp
    ## with junk files?  Using /dev/null won't work because asan
    ## appends the process ID to the file name.
    ASAN_OPTIONS="leak_check_at_exit=0:log_path=/tmp/oct-asan-log:verbosity=0"
  else
    ASAN_OPTIONS="$ADDRESS_SANITIZER_OPTIONS"
  fi
  export ASAN_OPTIONS
fi

exec $builddir/libtool --mode=execute $driver \
  "$octave_executable" --no-init-path --path="$LOADPATH" \
  --image-path="$IMAGEPATH" --doc-cache-file="$DOCFILE" \
  --built-in-docstrings-file="$BUILT_IN_DOCSTRINGS_FILE" \
  --texi-macros-file="$TEXIMACROSFILE" --info-file="$INFOFILE" "$@"
