@c Copyright (C) 1996-2023 The Octave Project Developers
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

@node Matrix Factorizations, Ranges, Matrix and Vector Operations, Top
@chapter Matrix Factorizations
@cindex matrix factorizations
@cindex factorizations

@deftypefn  {} {} AEPBALANCE (void)
@deftypefnx  {} {} AEPBALANCE (const Matrix &@var{a}, const char *@var{balance_job})
@deftypefnx  {} {} AEPBALANCE (const AEPBALANCE &@var{a})
@end deftypefn

@deftypefn {} AEPBALANCE& {operator =} (const AEPBALANCE &@var{a})
@end deftypefn

@deftypefn {} Matrix balanced_matrix (void) const
@deftypefnx {} Matrix balancing_matrix (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const AEPBALANCE &@var{a})
@end deftypefn

@deftypefn {} {} ComplexAEPBALANCE (void)
@deftypefnx {} {} ComplexAEPBALANCE (const ComplexMatrix &@var{a}, const char *@var{balance_job})
@deftypefnx {} {} ComplexAEPBALANCE (const ComplexAEPBALANCE &@var{a})
@end deftypefn

@deftypefn {} ComplexAEPBALANCE& {operator =} (const ComplexAEPBALANCE &@var{a})
@end deftypefn

@deftypefn {} ComplexMatrix balanced_matrix (void) const
@deftypefnx {} ComplexMatrix balancing_matrix (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexAEPBALANCE &@var{a})
@end deftypefn

@deftypefn  {} {} DET (void)
@deftypefnx  {} {} DET (const DET &@var{a})
@end deftypefn

@deftypefn {} DET& {operator =} (const DET &@var{a})
@end deftypefn

@deftypefn {} int value_will_overflow (void) const
@deftypefnx {} int value_will_underflow (void) const
@end deftypefn

@deftypefn {} double coefficient (void) const
@deftypefnx {} int exponent (void) const
@deftypefnx {} double value (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const DET &@var{a})
@end deftypefn

@deftypefn  {} {} ComplexDET (void)
@deftypefnx  {} {} ComplexDET (const ComplexDET &@var{a})
@end deftypefn

@deftypefn {} ComplexDET& {operator =} (const ComplexDET &@var{a})
@end deftypefn

@deftypefn {} int value_will_overflow (void) const
@deftypefnx {} int value_will_underflow (void) const
@end deftypefn

@deftypefn {} Complex coefficient (void) const
@deftypefnx {} int exponent (void) const
@deftypefnx {} Complex value (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexDET &@var{a})
@end deftypefn

@deftypefn  {} {} GEPBALANCE (void)
@deftypefnx  {} {} GEPBALANCE (const Matrix &@var{a}, const Matrix &, const char *@var{balance_job})
@deftypefnx  {} {} GEPBALANCE (const GEPBALANCE &@var{a})
@end deftypefn

@deftypefn {} GEPBALANCE& {operator =} (const GEPBALANCE &@var{a})
@end deftypefn

@deftypefn {} Matrix balanced_a_matrix (void) const
@deftypefnx {} Matrix balanced_b_matrix (void) const
@deftypefnx {} Matrix left_balancing_matrix (void) const
@deftypefnx {} Matrix right_balancing_matrix (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const GEPBALANCE &@var{a})
@end deftypefn

@deftypefn  {} {} CHOL (void)
@deftypefnx  {} {} CHOL (const Matrix &@var{a})
@deftypefnx  {} {} CHOL (const Matrix &@var{a}, int &@var{info})
@deftypefnx  {} {} CHOL (const CHOL &@var{a})
@end deftypefn

@deftypefn {} CHOL& {operator =} (const CHOL &@var{a})
@end deftypefn

@deftypefn {} Matrix chol_matrix (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const CHOL &@var{a})
@end deftypefn

@deftypefn  {} {} ComplexCHOL (void)
@deftypefnx  {} {} ComplexCHOL (const ComplexMatrix &@var{a})
@deftypefnx  {} {} ComplexCHOL (const ComplexMatrix &@var{a}, int &@var{info})
@deftypefnx  {} {} ComplexCHOL (const ComplexCHOL &@var{a})
@end deftypefn

@deftypefn {} ComplexCHOL& {operator =} (const ComplexCHOL &@var{a})
@end deftypefn

@deftypefn {} ComplexMatrix chol_matrix (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexCHOL &@var{a})
@end deftypefn

@deftypefn  {} {} HESS (void)
@deftypefnx  {} {} HESS (const Matrix &@var{a})
@deftypefnx  {} {} HESS (const Matrix&a, int &@var{info})
@deftypefnx  {} {} HESS (const HESS &@var{a})
@end deftypefn

@deftypefn {} HESS& {operator =} (const HESS &@var{a})
@end deftypefn

@deftypefn {} Matrix hess_matrix (void) const
@deftypefnx {} Matrix unitary_hess_matrix (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const HESS &@var{a})
@end deftypefn

@deftypefn  {} {} ComplexHESS (void)
@deftypefnx  {} {} ComplexHESS (const ComplexMatrix &@var{a})
@deftypefnx  {} {} ComplexHESS (const ComplexMatrix &@var{a}, int &@var{info})
@deftypefnx  {} {} ComplexHESS (const ComplexHESS &@var{a})
@end deftypefn

@deftypefn {} ComplexHESS& {operator =} (const ComplexHESS &@var{a})
@end deftypefn

@deftypefn {} ComplexMatrix hess_matrix (void) const
@deftypefnx {} ComplexMatrix unitary_hess_matrix (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexHESS &@var{a})
@end deftypefn

@deftypefn  {} {} SCHUR (void)
@deftypefnx  {} {} SCHUR (const Matrix &@var{a}, const char *@var{ord})
@deftypefnx  {} {} SCHUR (const Matrix &@var{a}, const char *@var{ord}, int &@var{info})
@deftypefnx  {} {} SCHUR (const SCHUR &@var{a}, const char *@var{ord})
@end deftypefn

@deftypefn {} SCHUR& {operator =} (const SCHUR &@var{a})
@end deftypefn

@deftypefn {} Matrix schur_matrix (void) const
@deftypefnx {} Matrix unitary_matrix (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const SCHUR &@var{a})
@end deftypefn

@deftypefn  {} {} ComplexSCHUR (void)
@deftypefnx  {} {} ComplexSCHUR (const ComplexMatrix &@var{a}, const char *@var{ord})
@deftypefnx  {} {} ComplexSCHUR (const ComplexMatrix &@var{a}, const char *@var{ord}, int &@var{info})
@deftypefnx  {} {} ComplexSCHUR (const ComplexSCHUR &@var{a}, const char *@var{ord})
@end deftypefn

@deftypefn {} ComplexSCHUR& {operator =} (const ComplexSCHUR &@var{a})
@end deftypefn

@deftypefn {} ComplexMatrix schur_matrix (void) const
@deftypefnx {} ComplexMatrix unitary_matrix (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexSCHUR &@var{a})
@end deftypefn

@deftypefn  {} {} SVD (void)
@deftypefnx  {} {} SVD (const Matrix &@var{a})
@deftypefnx  {} {} SVD (const Matrix &@var{a}, int &@var{info})
@deftypefnx  {} {} SVD (const SVD &@var{a})
@end deftypefn

@deftypefn {} SVD& {operator =} (const SVD &@var{a})
@end deftypefn

@deftypefn {} DiagMatrix singular_values (void) const
@deftypefnx {} Matrix left_singular_matrix (void) const
@deftypefnx {} Matrix right_singular_matrix (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const SVD &@var{a})
@end deftypefn

@deftypefn  {} {} ComplexSVD (void)
@deftypefnx  {} {} ComplexSVD (const ComplexMatrix &@var{a})
@deftypefnx  {} {} ComplexSVD (const ComplexMatrix &@var{a}, int &@var{info})
@deftypefnx  {} {} ComplexSVD (const ComplexSVD &@var{a})
@end deftypefn

@deftypefn {} ComplexSVD& {operator =} (const ComplexSVD &@var{a})
@end deftypefn

@deftypefn {} DiagMatrix singular_values (void) const
@deftypefnx {} ComplexMatrix left_singular_matrix (void) const
@deftypefnx {} ComplexMatrix right_singular_matrix (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexSVD &@var{a})
@end deftypefn

@deftypefn  {} {} EIG (void)
@deftypefnx  {} {} EIG (const Matrix &@var{a})
@deftypefnx  {} {} EIG (const Matrix &@var{a}, int &@var{info})
@deftypefnx  {} {} EIG (const ComplexMatrix &@var{a})
@deftypefnx  {} {} EIG (const ComplexMatrix &@var{a}, int &@var{info})
@deftypefnx  {} {} EIG (const EIG &@var{a})
@end deftypefn

@deftypefn {} EIG& {operator =} (const EIG &@var{a})
@end deftypefn

@deftypefn {} ComplexColumnVector eigenvalues (void) const
@end deftypefn

@deftypefn {} ComplexMatrix eigenvectors (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const EIG &@var{a})
@end deftypefn

@deftypefn  {} {} LU (void)
@deftypefnx  {} {} LU (const Matrix &@var{a})
@deftypefnx  {} {} LU (const LU &@var{a})
@end deftypefn

@deftypefn {} LU& {operator =} (const LU &@var{a})
@end deftypefn

@deftypefn {} Matrix L (void) const
@deftypefnx {} Matrix U (void) const
@deftypefnx {} Matrix P (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const LU &@var{a})
@end deftypefn

@deftypefn  {} {} ComplexLU (void)
@deftypefnx  {} {} ComplexLU (const ComplexMatrix &@var{a})
@deftypefnx  {} {} ComplexLU (const ComplexLU &@var{a})
@end deftypefn

@deftypefn {} ComplexLU& {operator =} (const ComplexLU &@var{a})
@end deftypefn

@deftypefn {} ComplexMatrix L (void) const
@deftypefnx {} ComplexMatrix U (void) const
@deftypefnx {} Matrix P (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexLU &@var{a})
@end deftypefn

@deftypefn  {} {} QR (void)
@deftypefnx  {} {} QR (const Matrix &@var{A})
@deftypefnx  {} {} QR (const QR &@var{a})
@end deftypefn

@deftypefn {} QR& {operator =} (const QR &@var{a})
@end deftypefn

@deftypefn {} Matrix Q (void) const
@deftypefnx {} Matrix R (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const QR &@var{a})
@end deftypefn

@deftypefn  {} {} ComplexQR (void)
@deftypefnx  {} {} ComplexQR (const ComplexMatrix &@var{A})
@deftypefnx  {} {} ComplexQR (const ComplexQR &@var{a})
@end deftypefn

@deftypefn {} ComplexQR& {operator =} (const ComplexQR &@var{a})
@end deftypefn

@deftypefn {} ComplexMatrix Q (void) const
@deftypefnx {} ComplexMatrix R (void) const
@end deftypefn

@deftypefn {} {ostream&} {operator <<} (ostream &@var{os}, const ComplexQR &@var{a})
@end deftypefn
